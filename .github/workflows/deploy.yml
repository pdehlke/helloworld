
name: Deploy to Production

on:
  issue_comment:
    types: [created]

jobs:
  approve:
    if: ${{ !github.event.issue.pull_request }}
    name: Approve deployment
    runs-on: ubuntu-latest
    steps:
      - name: Check for Approval
        uses: pdehlke/approveops@v2
        id: check-approval
        with:
          app-id: 194897
          app-private-key: ${{ secrets.APPROVER_BOT_KEY }}
          team-name: approver-team
          fail-if-approval-not-found: true

  parse:
    needs: [approve]
    name: Parse issue data
    if: ${{ !github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      deploy-environment: ${{ fromJSON(steps.issue_body_parser.outputs.payload).environment }}
      ci-run-number: ${{ fromJSON(steps.issue_body_parser.outputs.payload).runNumber }}
      deploy-sha: ${{ fromJSON(steps.issue_body_parser.outputs.payload).sha }}
      deploy-tag: ${{ fromJSON(steps.issue_body_parser.outputs.payload).tag }}
    steps:
      - name: Get Issue Data
        uses: peter-murray/issue-body-parser-action@v1
        id: issue_body_parser
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_id: ${{ github.event.issue.number }}
          payload_marker: target_payload

  deploy-prod:
    needs: [parse, approve]
    name: Deploy to PROD
    if: ${{ needs.parse.outputs.deploy-environment == 'prod' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
          aws-regions: ['us-east-1', 'us-west-2']

    steps:
    - name: Comment on Issue
      uses: peter-evans/create-or-update-comment@v1
      with:
        issue-number: ${{ github.event.issue.number }}
        body: 'Prod Deployment for ${{ needs.parse.outputs.deploy-tag }} initiated in ${{ matrix.aws-regions }} ðŸš€'

    - name: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ needs.parse.outputs.deploy-tag }}

    - name: Render task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task_definitions/prod.json
        container-name: app
        image: 963931055713.dkr.ecr.${{ matrix.aws-regions }}.amazonaws.com/babelfish:${{ needs.parse.outputs.deploy-sha }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ECS_PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ECS_PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ matrix.aws-regions }}

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: ${{ secrets.ECS_CLUSTER }}-prod
        service: ${{ secrets.ECS_SERVICE }}-prod
        wait-for-service-stability: false

    - name: Notify on Slack (Success)
      if: success()
      uses: abinoda/slack-action@master
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      with:
        args: >-
          {\"channel\":\"${{ secrets.SLACK_CM_CHANNEL_ID }}\",\"blocks\":[
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Repository:* ${{ github.repository }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Deploy to PROD:* ${{ needs.parse.outputs.deploy-tag }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Succeeded! :white_check_mark:\n\"}},
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":rocket: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Action Run> :rocket:\"}},
          {\"type\":\"divider\"}]}

    - name: Notify on Slack (Failure)
      if: failure()
      uses: abinoda/slack-action@master
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      with:
        args: >-
          {\"channel\":\"${{ secrets.SLACK_CM_CHANNEL_ID }}\",\"blocks\":[
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Repository:* ${{ github.repository }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Deploy to PROD:* ${{ needs.parse.outputs.deploy-tag }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Failed! :bangbang:\n\"}},
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":rocket: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Action Run> :rocket:\"}},
          {\"type\":\"divider\"}]}


  close-issue:
    needs: [deploy-prod]
    name: Clean up
    if: ${{ always() }}
    runs-on: ubuntu-latest

    steps:
      - name: Close Issue
        if: ${{ needs.deploy-prod.result == 'success' }}
        uses: peter-evans/close-issue@v1.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment: 'Deployment Completed ðŸŒŸ'








