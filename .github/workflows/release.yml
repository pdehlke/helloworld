name: Release code and deploy to Staging

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      tag: ${{ steps.changelog.outputs.tag }}

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm

    - name: Install conventional Changelog dependencies
      run: npm i conventional-changelog-conventionalcommits@7.0.2

    - name: Conventional Changelog Action
      id: changelog
      uses: TriPSs/conventional-changelog-action@v5.2.1
      with:
        config-file-path: ./.changelog.config.js
        skip-version-file: true
        skip-commit: true
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: zulu
        java-version: 17

    - name: Set up maven
      uses: whelk-io/maven-settings-xml-action@v20
      with:
        output_file: $HOME/.m2/settings.xml
        repositories: >
          [
            {
              "id": "github-packages",
              "url": "https://maven.pkg.github.com/aboveproperty/*"
            }
          ]
        servers: '[{
            "id": "github-packages",
            "username": "${{ secrets.GH_USERNAME }}",
            "password": "${{ secrets.GH_PASSWORD }}"
          }, {
            "id": "dev-nexus-abvprp",
            "username": "${{ secrets.NEXUS_USERNAME }}",
            "password": "${{ secrets.NEXUS_PASSWORD }}"
          }, {
            "id": "github",
            "username": "${{ github.actor }}",
            "password": "${{ secrets.GITHUB_TOKEN }}"
          }]'
        mirrors: >
          [
            {
              "id": "dev-nexus-abvprp",
              "name": "Above Property Nexus",
              "mirrorOf": "external:*,!github-packages",
              "url": "https://nexus.dev.abvprp.com/repository/Public-Repositories/"
            }
          ]

    - name: Cache local Maven repository
      uses: actions/cache@v3
      timeout-minutes: 5
      with:
        path: |
          ~/.m2/repository/*/*/*
        key: ${{ runner.os }}-m2-dependencies-owasp-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-dependencies-all-${{ hashFiles('**/pom.xml') }}
          ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml') }}
          ${{ runner.os }}-m2-dependencies-core-modules-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ECR_PUSH_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ECR_PUSH_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Release to ECR
      #
      # See https://github.com/actions/cache#cache-scopes. Caches are scoped to the key, version.
      # and branch. Caches created on branches are not accessable from actions being run on sibling
      # branches, but the default branch cache is available to all child branches. We run the owasp
      # checker here so PRs can access the nvn/owasp cache.
      #
      run: mvn --no-transfer-progress -Djgitver.use-version=${{ steps.changelog.outputs.version }} -DskipTests=true -DretireJsAnalyzerEnabled=false -DossindexAnalyzerEnabled=false -DuseGitHubPackages=true --file pom.xml -Dfmt.skip=true -fae -B -DsuppressionFile=./.suppressed-dependency-check.xml clean -Ddependency-check.skip=true org.owasp:dependency-check-maven:10.0.0:aggregate -DnvdApiKey=5a7464a0-a4db-446d-9e74-3c34fbac6b39 -DnvdApiDelay=24000 -DnvdMaxRetryCount=20 compile jib:build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a GitHub release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "target/*.jar,target/CHANGELOG.md"
        tag: ${{ steps.changelog.outputs.tag }}
        name: Release ${{ steps.changelog.outputs.version }}
        body: ${{ steps.changelog.outputs.clean_changelog }}
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-stage:
    needs: [build]
    name: Deploy to STAGE
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.changelog.outputs.tag }}

    - name: Render task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task_definitions/stage.json
        container-name: app
        image: 795569841461.dkr.ecr.us-east-1.amazonaws.com/babelfish:${{ github.sha }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ECS_STAGE_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ECS_STAGE_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: ${{ secrets.ECS_CLUSTER }}-stage
        service: ${{ secrets.ECS_SERVICE }}-stage
        wait-for-service-stability: false

    - name: Create an issue for prod deploy
      uses: JasonEtco/create-an-issue@v2.6.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ENVIRONMENT: prod
        RUNNUMBER: ${{ github.run_number }}
        SHA: ${{ github.sha }}
        TAG: ${{ needs.build.outputs.tag }}
      with:
        filename: .github/deployment-approval.md

    - name: Notify on Slack (Success)
      if: success()
      uses: abinoda/slack-action@master
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      with:
        args: >-
          {\"channel\":\"${{ secrets.SLACK_CM_CHANNEL_ID }}\",\"blocks\":[
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Repository:* ${{ github.repository }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}},
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Deploy to STAGE:* ${{ needs.build.outputs.tag }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Succeeded! :white_check_mark:\n\"}},
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":rocket: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Action Run> :rocket:\"}},
          {\"type\":\"divider\"}]}

    - name: Notify on Slack (Failure)
      if: failure()
      uses: abinoda/slack-action@master
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      with:
        args: >-
          {\"channel\":\"${{ secrets.SLACK_CM_CHANNEL_ID }}\",\"blocks\":[
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Repository:* ${{ github.repository }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}},
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Deploy to STAGE:* ${{ needs.build.outputs.tag }}\"}},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Failed! :bangbang:\n\"}},
          {\"type\":\"divider\"},
          {\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":rocket: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Action Run> :rocket:\"}},
          {\"type\":\"divider\"}]}


# TODO:
# create a kanban item after build
# use the release tag to identify
# move kanban item to "stage" after deployment
